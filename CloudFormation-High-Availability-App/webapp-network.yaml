AWSTemplateFormatVersion: "2010-09-09"

Metadata:
    Instances:
        Description:

            "Project 02; This template deploys a VPC with an Internet Gateway and associated 
            InternetGatewayAttachement to direct traffic in and out of the VPC. There are a 
            pair of public and private subnets each in their own Availability Zone. 
            The public subnets will both have a NAT Gateway to ensure traffic is able to move 
            from the private to the public subnets and eventually out to the broader internet.
            An AutoScalingGroup will allow for the servers to scale up during times of high 
            demand or technical problems with an instance. A Load Balancer will reside in the 
            VPC to distribute requests across the multiple web server instances. 
            There will be an S3 Bucket as well where the website files will be copied from to 
            the web servers."

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: udacity-project02-ha-webapp

    VpcCIDR:
        Description: IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet01CIDR:
        Description: IP range (CIDR notation) for the corresponding subnet
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet02CIDR:
        Description: IP range (CIDR notation) for the corresponding subnet
        Type: String
        Default: 10.0.1.0/24

    PrivateSubnet01CIDR:
        Description: IP range (CIDR notation) for the corresponding subnet
        Type: String
        Default: 10.0.2.0/24

    PrivateSubnet02CIDR:
        Description: IP range (CIDR notation) for the corresponding subnet
        Type: String
        Default: 10.0.3.0/24

# Mappings:
#     set of mappings
# Conditions:
#     set of conditions
# Transform:
#     set of transforms

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                -   Key: Name
                    Value: !Ref EnvironmentName

    # Provides bi-direction access for the VPC
    InternetGateway: 
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                -   Key: Name
                    Value: !Ref EnvironmentName

    # This is essentially equivalent to a port mapping for the Default Gateway
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    
    ### Subnets ###

    # Subnet definitions providing public networking spaces
    PublicSubnet01:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet01CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Public Subnet 01 (AZ-A)
            VpcId: !Ref VPC

    PublicSubnet02:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet02CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Public Subnet 02 (AZ-B)
            VpcId: !Ref VPC

    # Subnet definitions providing private networking spaces
    PrivateSubnet01:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet01CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Private Subnet 01 (AZ-A)
            VpcId: !Ref VPC

    PrivateSubnet02:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet02CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Private Subnet 02 (AZ-B)
            VpcId: !Ref VPC


    ### NAT Gateways (Network Address Translation) ###
    
    # First we will allocate static or "Elastic" IPs to be used for the NAT Gateways
    NatGateway01EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            # careful here, the domain declaration should be lowercase
            Domain: vpc

    NatGateway02EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            # careful here, the domain declaration should be lowercase
            Domain: vpc

    # Second we will create the Gateways and have them use the EIPs we just allocated
    NatGateway01:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway01EIP.AllocationId
            SubnetId: !Ref PublicSubnet01

    NatGateway02:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway02EIP.AllocationId
            SubnetId: !Ref PublicSubnet02

    
    ### Routing ###

    ## General Public Routing ##
    # Create a Public Routing table and associate it with the VPC
    # This table will contain rules to cover all traffic moving in or out of the VPC
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes
            VpcId: !Ref VPC

    ## Specific Public Routing ##
    # Define the Default Public Route and associate it with our InternetGateway
    # This rule will direct all traffic to the Default Gateway or InternetGateway
    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
            RouteTableId: !Ref PublicRouteTable

    ### General Private Routing ###
    # Create a Private Routing table and associate it with the VPC
    PrivateRouteTable01:
        Type: AWS::EC2::RouteTable
        Properties:
            Tags:
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ-A)
            VpcId: !Ref VPC

    # Create a Private Routing table and associate it with the VPC
    PrivateRouteTable02:
        Type: AWS::EC2::RouteTable
        Properties: 
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ-B)
            VpcId: !Ref VPC

    ## Specific Private Routing ##
    # Define the Default Private Route and associate it with NatGateway1
    # This rule will direct all internal traffic to the NatGateway1
    DefaultPrivateRoute01:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
            RouteTableId: !Ref PrivateRouteTable01

    # Define the Default Private Route and associate it with NatGateway2
    # This rule will direct all internal traffic to the NatGateway2
    DefaultPrivateRoute02:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
            RouteTableId: !Ref PrivateRouteTable02


    ## Route Table Associations ##
    # Associate the PublicRouteTable with PublicSubnet1
    PublicSubnet01RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet01

    # Associate the PublicRouteTable with PublicSubnet2
    PublicSubnet02RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet02

    # Associate the PrivateRouteTable01 with PrivateSubnet01
    PrivateSubnet01RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable01
            SubnetId: !Ref PrivateSubnet01

    # Associate the PrivateRouteTable02 with PrivateSubnet02
    PrivateSubnet02RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable02
            SubnetId: !Ref PrivateSubnet02

Outputs:
    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
            Name: !Sub ${EnvironmentName}-VPCID

    VPCPublicRouteTable:
        Description: Public Routing to Load Balancer in Public Subnet
        Value: !Ref PublicRouteTable
        Export:
            Name: !Sub ${EnvironmentName}-PUB-RT

    VPCPrivateRouteTable01:
        Description: Private Routing to PrivateSubnet01
        Value: !Ref PrivateRouteTable01
        Export:
            Name: !Sub ${EnvironmentName}-PRI-RT01

    VPCPrivateRouteTable02:
        Description: Private Routing to PrivateSubnet02
        Value: !Ref PrivateRouteTable02
        Export:
            Name: !Sub ${EnvironmentName}-PRI-RT02

    PublicSubnets:
        Description: A list of the public subnets in the project
        Value: !Join [ ",",  [ !Ref PublicSubnet01, !Ref PublicSubnet02 ]]
        Export:
            Name: !Sub ${EnvironmentName}-PUB-NETS

    PublicSubnet01:
        Description: A reference to the public subnet in AZ-A
        Value: !Ref PublicSubnet01
        Export:
            Name: !Sub ${EnvironmentName}-PUB-SN01

    PublicSubnet02:
        Description: A reference to the public subnet in AZ-B
        Value: !Ref PublicSubnet02
        Export:
            Name: !Sub ${EnvironmentName}-PUB-SN02

    PrivateSubnets:
        Description: A list of the private subnets in the project
        Value: !Join [ ",", [ !Ref PrivateSubnet01, !Ref PrivateSubnet02 ]]
        Export:
            Name: !Sub ${EnvironmentName}-PRI-NETS

    PrivateSubnet01:
        Description: A reference to the private subnet in AZ-A
        Value: !Ref PrivateSubnet01
        Export:
            Name: !Sub ${EnvironmentName}-PRI-SN01

    PrivateSubnet02:
        Description: A reference to the private subnet in AZ-B
        Value: !Ref PrivateSubnet02
        Export:
            Name: !Sub ${EnvironmentName}-PRI-SN02