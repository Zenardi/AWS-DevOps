# This document uses recommendations located at the following URL:
Metadata:
    Instances:
        Description:
            
            "Udacity Project 2; Deploy a High-Availability Web App using CloudFormation 
            and the principles of Infrastructure as Code"

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: udacity-project02-ha-webapp

    # AccessLogsS3Bucket:
    #     Description:

    #         "S3 bucket name to place the logs in. 
    #         The value of 'access_logs.s3.bucket' cannot be greater than 63 characters"

    #     Type: String
    #     Default: "project-02-zenardi-webapp-logs"


    InstanceType:
        Description: 
            
            "The EC2 instance type - General Purpose
            Use Cases: Micro-services, low-latency interactive applications, 
            small and medium databases, virtual desktops, development environments, 
            code repositories, and business-critical applications"
        
        Type: String
        Default: t3.medium
        AllowedValues: [t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge]
        ConstraintDescription: must select a valid general purpose instance type.

# Mappings:
#     set of mappings
# Conditions:
#     set of conditions
# Transform:
#     set of transforms

Resources:
    # The following group of resources have been configured manually via the AWS Console 
    # but for time being I will leave these commented out here as I would prefer if these
    # resources were created programmatically.
    #
    # IAM Role
    # S3AccessIAMRole:
    #     Type: AWS::IAM::Role
    #     Properties: 
    #         AssumeRolePolicyDocument: Json
    #         Path: String # Default value is "/" and though not required this property might be important
    #         Policies: 
    #         - Policy
    #         RoleName: String

    # # IAM Policy
    # S3AccessIAMPolicy:
    #     Type: AWS::IAM::Policy
    #     Properties:
    #         PolicyDocument: Json
    #         PolicyName: String
    #         Roles: 
    #             - S3AccessIAMRole

    # # S3 Bucket Policy
    # S3AccessBucketPolicy:
    #     Type: AWS::S3::BucketPolicy
    #     Properties:
    #         PolicyDocument:
    #             Id: MyPolicy
    #             Version: '2012-10-17'
    #             Statement:
    #             - Sid: ReadAccess
    #                 Action:
    #                 - s3:GetObject
    #                 Effect: Allow
    #                 Resource: !Sub "arn:aws:s3:::${AccessLogsS3Bucket}/*"
    #                 Principal:
    #                     AWS: !GetAtt user1.Arn
    #         Bucket: !Ref mybucket

    # Security Groups
    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http traffic to and from load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            -   IpProtocol:     tcp
                # Describe the port range
                FromPort:       80
                ToPort:         80
                # Describe the IP range
                CidrIp:         0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol:     tcp
                # Describe the port range
                FromPort:       80
                ToPort:         80
                # Describe the IP range
                CidrIp:         0.0.0.0/0

    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http traffic to hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            -   IpProtocol:     tcp
                # Describe the port range
                FromPort:       80
                ToPort:         80
                # Describe the IP range
                CidrIp:         0.0.0.0/0
            -   IpProtocol:     tcp
                # Describe the port range
                FromPort:       22
                ToPort:         22
                # Describe the IP range
                CidrIp:         0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol:     tcp
                # Describe the port range
                FromPort:       0
                ToPort:         65535
                # Describe the IP range
                CidrIp:         0.0.0.0/0

    # Launch Configuration
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    # A simple Hello World from the User-Data script
                    echo "DEBUG -- Hello from user-data!"

                    # Log EC2 Linux user-data to the console
                    # This guidance was referenced at the following URL
                    # https://aws.amazon.com/premiumsupport/knowledge-center/ec2-linux-log-user-data/
                    exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                    # Update the local package registry
                    echo "DEBUG -- Attempting to update YUM packages"
                    yum update -y

                    # Install the Apache Server
                    echo "DEBUG -- Attempting to install the Apache Web Server"
                    yum install -y httpd
                    # Start the Apache Server
                    echo "DEBUG -- Attempting to start the Apache Web Server"
                    systemctl start httpd.service
                    # Enable the Apache Server
                    echo "DEBUG -- Attempting to enable the Apache Web Server"
                    systemctl enable httpd.service
                    # Check the status of the Apache Server
                    echo "DEBUG -- Attempting to check the status of the Apache Web Server"
                    systemctl status httpd.service

                    # Copy site files from S3 to local directory
                    echo "DEBUG -- Attepmting to copy the site files from the S3 bucket to the local directory"
                    wget -P ../../var/www/html https://project-02-zenardi-webapp.s3-us-west-2.amazonaws.com/index.html

            ImageId: ami-07b4f3c02c7f83d59 # Ubuntu 18
            #ImageId: ami-0f2176987ee50226e # Amazon Linux
            # Select instance based on usage requirements
            # 2 vCPUs, 4GB of RAM, Ubuntu 18
            InstanceType: !Ref 'InstanceType'
            #KeyName: EC2InstanceAdministratorKey # SSH Key value here if/when necessary
            # Associate server instances with a SecurityGroup
            SecurityGroups: 
            - Ref: WebServerSecurityGroup
            # Add a Volume for storage to be used by the server
            BlockDeviceMappings:
            -   DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: '10' # 10GB

    # AutoScaling group
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            # Deploy the instances into the Private Subnets
            - Fn::ImportValue: !Sub "${EnvironmentName}-PRI-NETS"
            # Deploy the instances into the Public Subnets
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-NETS"
            LaunchConfigurationName: 
                Ref: WebAppLaunchConfig
            MinSize: '1'
            MaxSize: '2'
            TargetGroupARNs:
            -   Ref: WebAppTargetGroup

    ### Load Balancer Components ###
    # Target Group, with health check
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"
    
    # LoadBalancer
    WebAppLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            # LoadBalancerAttributes:
            #  -  Key: access_logs.s3.enabled
            #     Value: true
            #     Key: access_logs.s3.bucket
            #     Value: !Ref AccessLogsS3Bucket
            SecurityGroups:
            - Ref: LoadBalancerSecurityGroup
            Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN01"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN02"

    # Listener
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn: 
                    Ref: WebAppTargetGroup
            LoadBalancerArn: !Ref WebAppLoadBalancer
            Port: 80
            Protocol: HTTP

    # Listner Rule
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            -   Type: forward
                TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
            -   Field: path-pattern
                Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1

Outputs:
    WebAppLoadBalancerDNSName:
        Description: DNS name or Public URL of the Load Balancer
        Value: !Join [ "", [ 'http://', !GetAtt WebAppLoadBalancer.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName